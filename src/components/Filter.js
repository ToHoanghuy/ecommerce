import React from 'react';
import { Filter as FilterIcon, Sparkles } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { useAppState, useAppDispatch } from '../context/AppContext';
import { coursesAPI } from '../services/api';
import './Filter.css';

// Static data cho categories v√† price ranges
const categories = [
  "T·∫•t c·∫£",
  "L·∫≠p tr√¨nh", 
  "Ngo·∫°i ng·ªØ",
  "Thi·∫øt k·∫ø",
  "Marketing",
  "S·ª©c kh·ªèe",
  "T√†i ch√≠nh"
];

const priceRanges = [
  { label: "T·∫•t c·∫£", min: 0, max: Infinity },
  { label: "D∆∞·ªõi 500K", min: 0, max: 500000 },
  { label: "500K - 1 tri·ªáu", min: 500000, max: 1000000 },
  { label: "Tr√™n 1 tri·ªáu", min: 1000000, max: Infinity }
];

const Filter = () => {
  const navigate = useNavigate();
  const state = useAppState();
  const { dispatch, actionTypes } = useAppDispatch();

  const handleCategoryChange = (category) => {
    dispatch({ type: actionTypes.SET_CATEGORY, payload: category });
  };

  const handlePriceRangeChange = (priceRange) => {
    dispatch({ type: actionTypes.SET_PRICE_RANGE, payload: priceRange });
  };

  const handleGetSuggestions = async () => {
    try {
      dispatch({ type: actionTypes.SET_LOADING_SUGGESTIONS, payload: true });
      dispatch({ type: actionTypes.SET_ERROR, payload: null });
      
      const suggestions = await coursesAPI.getAISuggestions();
      
      dispatch({ type: actionTypes.SET_SUGGESTIONS, payload: suggestions });
      
      // Navigate to AI suggestions page
      navigate('/ai-suggestions');
    } catch (error) {
      dispatch({ type: actionTypes.SET_ERROR, payload: 'Kh√¥ng th·ªÉ l·∫•y g·ª£i √Ω l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.' });
    } finally {
      dispatch({ type: actionTypes.SET_LOADING_SUGGESTIONS, payload: false });
    }
  };

  return (
    <div className="filter-container">
      <div className="filter-header">
        <FilterIcon className="filter-icon" />
        <h3>B·ªô l·ªçc & G·ª£i √Ω</h3>
      </div>

      {/* AI Suggestions */}
      <div className="filter-section">
        <h4>ü§ñ G·ª£i √Ω th√¥ng minh</h4>
        <button 
          className={`suggestion-button ${state.isLoadingSuggestions ? 'loading' : ''}`}
          onClick={handleGetSuggestions}
          disabled={state.isLoadingSuggestions}
        >
          <Sparkles className="sparkles-icon" />
          {state.isLoadingSuggestions ? 'ƒêang t√¨m g·ª£i √Ω...' : 'G·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p'}
        </button>
        
        {state.error && (
          <div className="error-message">
            {state.error}
          </div>
        )}
      </div>

      {/* Category Filter */}
      <div className="filter-section">
        <h4>üìö Danh m·ª•c</h4>
        <div className="filter-options">
          {categories.map(category => (
            <button
              key={category}
              className={`filter-option ${state.selectedCategory === category ? 'active' : ''}`}
              onClick={() => handleCategoryChange(category)}
            >
              {category}
            </button>
          ))}
        </div>
      </div>

      {/* Price Range Filter */}
      <div className="filter-section">
        <h4>üí∞ Kho·∫£ng gi√°</h4>
        <div className="filter-options">
          {priceRanges.map((range, index) => (
            <button
              key={index}
              className={`filter-option ${state.selectedPriceRange.label === range.label ? 'active' : ''}`}
              onClick={() => handlePriceRangeChange(range)}
            >
              {range.label}
            </button>
          ))}
        </div>
      </div>

      {/* Filter Results Info */}
      <div className="filter-results">
        <p>T√¨m th·∫•y <strong>{state.filteredCourses.length}</strong> kh√≥a h·ªçc</p>
      </div>
    </div>
  );
};

export default Filter;
